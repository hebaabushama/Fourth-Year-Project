# *****************************************************
# Title: Methylation Analysis for GSE171361

# Methylation Analysis file for GSE171361
#
# Author: Heba Abushama 
# Email: Heba.Abushama@ucdconnect.ie
# Date: 17/11/2022
#
# *****************************************************
# Clear R's memory 
rm(list=ls())   

# Set the working directory 
setwd("/Volumes/HEBA'S USB/R Studio") 

# *****************************************************
# Step 1 - Load libraries ----
library(GEOquery)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(minfi)
library(minfiData)
library(limma)
library(maxprobes)
library(devtools)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)



# *****************************************************
# Step 2 - Load in data and files ----

# Loading in samples
# Load in IDAT files for all samples (cancerous and non cancerous samples)
dataDirectory_all <- "/Volumes/HEBA'S USB/FourthYear/Bioinformatics/Datasets/GSE171361"
list.files(dataDirectory_all, recursive = TRUE)

# Load in IDAT files for controls only (non cancerous ureter samples)
dataDirectory_controls <- "/Volumes/HEBA'S USB/FourthYear/Bioinformatics/Datasets/GSE171361 controls"
list.files(dataDirectory_controls, recursive = TRUE)


# Get the 450K annotation data
ann450K <- getAnnotation("IlluminaHumanMethylation450kanno.ilmn12.hg19")
head(ann450K)


# Load in annotation files
# Load in annotation file for GSE171361 controls
targets_controls <- read.metharray.sheet("/Volumes/HEBA'S USB/FourthYear/Bioinformatics/", pattern="GSE171361_controls_annotations_file.csv")
targets_controls$X <- NULL
targets_controls

# Load in annotation file for GSE171361
targets <- read.metharray.sheet("/Volumes/HEBA'S USB/FourthYear/Bioinformatics/", pattern="GSE171361_annotations_file.csv")
targets$X <- NULL
targets


# Read in raw data by linking annotation file to IDAT files
# Read in the raw data for all ---
RGSet <- read.metharray.exp(base = dataDirectory_all, targets = targets, verbose=T)
RGSet

# Read in the raw data for controls ---
RGSet_controls <- read.metharray.exp(base = dataDirectory_controls, targets = targets_controls, verbose=T)
RGSet_controls


# Give the samples descriptive names for both sets
sampleNames(RGSet) <- targets$GEO_accession_number
sampleNames(RGSet_controls) <- targets$GEO_accession_number


# *****************************************************
# Step 3 - Quality control  ----
# Calculate the detection p-values
detP <- detectionP(RGSet)
head(detP)

# Make the detection p-values of the samples a dataframe
detP_df = as.data.frame(detP)

# Calculate the average p-value per column (sample)
detP_df_means = colMeans(detP_df)

# Make the average p-values calculated into a dataframe
detP_means = as.data.frame(detP_df_means)

# Making row names as column
detP_means <- cbind(rownames(detP_means),detP_means)

# Rename column names in new dataframe
rownames(detP_means) <- NULL
colnames(detP_means)[1] <- "GEO Accession number" 
colnames(detP_means)[2] <- "Mean detection p-values" 
names(detP_means)

# Add p-values generated into targets file
targets$pvalue = detP_df_means

# Rename column names in the targets file
colnames(targets)
colnames(targets)[1] = "GEO_Accession_number"
targets$GEO_Accession_number

# Plot the average p-values per sample in a barchart
options(scipen=999)                                             
q <- ggplot(targets, 
            mapping = aes(x=GEO_Accession_number, 
                          y=pvalue, 
                          fill = factor(targets$Diagnosis))) + 
  geom_bar(stat = "identity", colour="black") +
  ggtitle("Mean Detection P-value of Samples in GSE171361 ") +
  labs(x='GEO Accession Number',              
       y='Mean Detection P-values') +  
  ggeasy::easy_center_title() +
  theme_classic()                          
q + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 


t <- ggplot(targets, 
            mapping = aes(x=GEO_Accession_number, 
                          y=pvalue, 
                          fill = factor(targets$Diagnosis))) + 
  geom_bar(stat = "identity", colour="black") +
  ggtitle("Mean Detection P-value of Samples in GSE171361 ") +
  labs(x='GEO Accession Number',              
       y='Mean Detection P-values') +  
  ylim(0, 0.05) + 
  geom_hline(yintercept=0.05,  color = "red") +
  theme_classic()                          
t + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 


# Generate quality control report
qcReport(RGSet, sampNames=targets$GEO_accession_number, sampGroups=targets$Diagnosis, 
         pdf="qcReport.pdf")


# Repeat for controls for downstream analysis:
# Calculate the detection p-values for the controls (non cancerous ureter samples) only
detP_controls <- detectionP(RGSet_controls)
head(detP_controls)

# Remove poor quality samples
keep <- colMeans(detP_controls) < 0.05
RGSet_controls <- RGSet_controls[,keep]
RGSet_controls

# Remove poor quality samples from targets data
targets_cont = subset(targets_controls, Diagnosis == "control")
targets_cont <- targets_cont[keep,]
targets_cont[,1:5]

# Remove poor quality samples from detection p-value table
detP_controls <- detP_controls[,keep]
dim(detP_controls)

# Add p-values generated into targets controls file
targets_cont$pvalue = d

# Rename column names in the targets controls file
colnames(targets_cont)
colnames(targets_cont)[1] = "GEO_Accession_number"
targets$GEO_Accession_number


# *****************************************************
# Step 4 - Normalisation  ----
# Normalize the data to create a GenomicRatioSet object
mSetSq <- preprocessQuantile(RGSet_controls) 


# Create a MethylSet object from the raw data for plotting
mSetRaw <- preprocessRaw(RGSet_controls)


# Visualise what the data looks like before and after normalisation
par(mfrow=c(1,2))
densityPlot(RGSet_controls, sampGroups=targets_controls ,main="Raw", legend=FALSE)
densityPlot(getBeta(mSetSq), sampGroups=targets_controls,
            main="Normalized", legend=FALSE)


# *****************************************************
# Step 5 - Data Exploration  ----
# Create MDS plots to look at largest sources of variation
pal <- brewer.pal(8,"Dark2")
plotMDS(getM(mSetSq),  main="Principal Component 1 vs Principal Component 2 (49% Variance)", top=1000, gene.selection="common",
        col=pal[factor(targets_controls)], pch=19)

# Examine higher dimensions to look at other sources of variation
par(mfrow=c(1,3))
plotMDS(getM(mSetSq), main="Principal Component 1 vs Principal Component 3 (48% Variance)", top=1000, gene.selection="common", 
        col=factor(targets_controls), dim=c(1,3), pch=19)

plotMDS(getM(mSetSq), main="Principal Component 2 vs Principal Component 3 (37% Variance)", top=1000, gene.selection="common", 
        col=factor(targets_controls), dim=c(2,3), pch=19)

plotMDS(getM(mSetSq), main="Principal Component 3 vs Principal Component 4 (35% Variance)",top=1000, gene.selection="common", 
        col=factor(targets_controls), dim=c(3,4), pch=19)


# *****************************************************
# Step 6 - Filtering  ----
# Ensure probes are in the same order in the mSetSq and detP objects
detP_controls <- detP_controls[match(featureNames(mSetSq),rownames(detP_controls)),] 

# Filtering datasets to exclude:
# 1. Poor Performing Probes
# Remove any probes that have failed in one or more samples
keep <- rowSums(detP_controls < 0.01) == ncol(mSetSq) 
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt

# 2. Probes that Cover SNP Sites
# Remove probes with SNPs at CpG site
mSetSqFlt <- dropLociWithSnps(mSetSqFlt)
mSetSqFlt

# 3. Cross Reactive Probes
if (! ("devtools" %in% installed.packages())) install.packages("devtools")
devtools::install_github("markgene/maxprobes", force = T)
mSetSqFlt <- dropXreactiveLoci(mSetSqFlt)
mSetSqFlt <- mSetSqFlt[keep,] 
mSetSqFlt

# 4. Non CpG Sites at CpA and CpT
mSetSqFlt <- dropMethylationLoci(mSetSqFlt, dropRS = FALSE, dropCH = TRUE)
mSetSqFlt


# Create MDS plots to Examine at Largest Sources of Variation after Filtering
plotMDS(getM(mSetSqFlt), top=1000, main="Principal Component 1 vs Principal Component 2 (84% Variance)", gene.selection="common", 
        col=pal[factor(targets_controls)], cex=0.8, pch=19)


# Calculate M-values for Downstream Statistical Analysis
mVals <- getM(mSetSqFlt)
head(mVals[,1:5])

# calculate B-values for Downstream Statistical Analysis
bVals <- getBeta(mSetSqFlt)
head(bVals[,1:5])

# Compare Dissribution of Data with M and Beta Values
par(mfrow=c(1,2))
densityPlot(bVals, sampGroups=targets_controls, main="Beta values", 
            legend=FALSE, xlab="Beta values")
densityPlot(mVals, sampGroups=targets_controls, main="M-values", 
            legend=FALSE, xlab="M values")


# *****************************************************
# Step 7 - Export as csv ---
# Make into dataframe for beta values
bVals1 = as.data.frame(bVals)

# Rename columns for beta values
bVals1 <- bVals1 %>% rename("V1" = "U1",
                            "V2" = "U2",
                            "V3" = "U3",
                            "V4" = "U4",
                            "V5" = "U5",
                            "V6" = "U6")

# Download as csv file
write.csv(bVals1,file="/Volumes/HEBA'S USB/R Studio/GSE171361_BValues.csv")

# Make into dataframe for M values
mVals1 = as.data.frame(mVals)

# Rename columns for beta values
mVals1 <- mVals1 %>% rename("V1" = "U1",
                            "V2" = "U2",
                            "V3" = "U3",
                            "V4" = "U4",
                            "V5" = "U5",
                            "V6" = "U6")
# Download as csv file
write.csv(mVals1,file="/Volumes/HEBA'S USB/R Studio/GSE171361_MValues.csv")

# *****************************************************

